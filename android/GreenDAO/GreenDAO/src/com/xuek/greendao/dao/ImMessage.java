package com.xuek.greendao.dao;

import com.xuek.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table IM_MESSAGE.
 */
public class ImMessage {

    private Long id;
    private String content;
    private String sendTime;
    private String messageStatus;
    private String messageContentType;
    private Long from;
    private Long to;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ImMessageDao myDao;

    private User fromUser;
    private Long fromUser__resolvedKey;

    private User toUser;
    private Long toUser__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public ImMessage() {
    }

    public ImMessage(Long id) {
        this.id = id;
    }

    public ImMessage(Long id, String content, String sendTime, String messageStatus, String messageContentType, Long from, Long to) {
        this.id = id;
        this.content = content;
        this.sendTime = sendTime;
        this.messageStatus = messageStatus;
        this.messageContentType = messageContentType;
        this.from = from;
        this.to = to;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getImMessageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getSendTime() {
        return sendTime;
    }

    public void setSendTime(String sendTime) {
        this.sendTime = sendTime;
    }

    public String getMessageStatus() {
        return messageStatus;
    }

    public void setMessageStatus(String messageStatus) {
        this.messageStatus = messageStatus;
    }

    public String getMessageContentType() {
        return messageContentType;
    }

    public void setMessageContentType(String messageContentType) {
        this.messageContentType = messageContentType;
    }

    public Long getFrom() {
        return from;
    }

    public void setFrom(Long from) {
        this.from = from;
    }

    public Long getTo() {
        return to;
    }

    public void setTo(Long to) {
        this.to = to;
    }

    /** To-one relationship, resolved on first access. */
    public User getFromUser() {
        Long __key = this.from;
        if (fromUser__resolvedKey == null || !fromUser__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User fromUserNew = targetDao.load(__key);
            synchronized (this) {
                fromUser = fromUserNew;
            	fromUser__resolvedKey = __key;
            }
        }
        return fromUser;
    }

    public void setFromUser(User fromUser) {
        synchronized (this) {
            this.fromUser = fromUser;
            from = fromUser == null ? null : fromUser.getId();
            fromUser__resolvedKey = from;
        }
    }

    /** To-one relationship, resolved on first access. */
    public User getToUser() {
        Long __key = this.to;
        if (toUser__resolvedKey == null || !toUser__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UserDao targetDao = daoSession.getUserDao();
            User toUserNew = targetDao.load(__key);
            synchronized (this) {
                toUser = toUserNew;
            	toUser__resolvedKey = __key;
            }
        }
        return toUser;
    }

    public void setToUser(User toUser) {
        synchronized (this) {
            this.toUser = toUser;
            to = toUser == null ? null : toUser.getId();
            toUser__resolvedKey = to;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    @Override
    public String toString() {
    	return "ImMessage [id=" + id + ", content=" + content + ", sendTime="
    			+ sendTime + ", messageStatus=" + messageStatus
    			+ ", messageContentType=" + messageContentType + ", from="
    			+ from + ", to=" + to + ", fromUser=" + fromUser
    			+ ", fromUser__resolvedKey=" + fromUser__resolvedKey
    			+ ", toUser=" + toUser + ", toUser__resolvedKey="
    			+ toUser__resolvedKey + "]";
    }
    // KEEP METHODS END

}
